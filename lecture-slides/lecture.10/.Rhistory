#| fig-align: center
ev_monthly_cycle <- ev_weeked |>
mutate(month = month(week, label = TRUE, abbr = TRUE)) |>
count(month, name = "evictions")
ggplot(ev_monthly_cycle, aes(month, evictions)) +
geom_col() +
coord_polar() +
labs(
title = "Seasonality: Evictions by Month (Polar Cycle)",
x = NULL, y = NULL
) +
theme_minimal()
#| label: date5-c
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(scales)
ev_week_counts <- ev_weeked |>
count(week, name = "evictions") |>
arrange(week)
ggplot(ev_week_counts, aes(week, evictions)) +
geom_line() +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
scale_y_continuous(labels = label_number(big.mark = ",")) +
labs(
title = "Evictions per Week (Dummy Data)",
x = NULL, y = "Evictions"
) +
theme_minimal()
#| label: date5-c
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(scales)
ev_week_counts <- ev_weeked |>
count(week, name = "evictions") |>
arrange(week)
#| label: date5-c
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(scales)
ev_week_counts <- ev_weeked |>
count(week, name = "evictions") |>
arrange(week)
#| label: date5-c
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(scales)
ggplot(ev_week_counts, aes(week, evictions)) +
geom_line() +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
scale_y_continuous(labels = label_number(big.mark = ",")) +
labs(
title = "Evictions per Week (Dummy Data)",
x = NULL, y = "Evictions"
) +
theme_minimal()
#| label: date5-l
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(dplyr)
library(lubridate)
library(ggplot2)
Bin to Monday-start weeks
#| label: date5-l
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(dplyr)
library(lubridate)
library(ggplot2)
ev_weeked <- ev |>
mutate(
executed_date = ymd(executed_date),
week = floor_date(executed_date, "week", week_start = 1)
)
ev_week_counts_boro <- ev_weeked |>
count(BOROUGH, week, name = "evictions") |>
arrange(BOROUGH, week)
ggplot(ev_week_counts_boro, aes(week, evictions)) +
geom_line() +
labs(title = "Evictions per Week — Faceted by Borough", x = NULL, y = "Evictions") +
facet_wrap(~ BOROUGH, ncol = 3, scales = "free_y") +
theme_minimal()
#| label: date5-l
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(dplyr)
library(lubridate)
library(ggplot2)
ev_week_counts_boro <- ev_weeked |>
count(BOROUGH, week, name = "evictions") |>
arrange(BOROUGH, week)
ggplot(ev_week_counts_boro, aes(week, evictions)) +
geom_line() +
labs(title = "Evictions per Week — Faceted by Borough", x = NULL, y = "Evictions") +
facet_wrap(~ BOROUGH, ncol = 3, scales = "free_y") +
theme_minimal()
#| label: date5-l
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(dplyr)
library(lubridate)
library(ggplot2)
#Weekly counts per borough(ev_by_boro)
ggplot(ev_by_boro, aes(week, evictions)) +
geom_line() +
labs(title = "Evictions per Week — Faceted by Borough", x = NULL, y = "Evictions") +
facet_wrap(~ BOROUGH, ncol = 3, scales = "free_y") +
theme_minimal()
#| label: date5-l
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(dplyr)
library(lubridate)
library(ggplot2)
#Weekly counts per borough(ev_by_boro)
ggplot(ev_by_boro, aes(BOROUGH, evictions)) +
geom_line() +
labs(title = "Evictions per Week — Faceted by Borough", x = NULL, y = "Evictions") +
facet_wrap(~ BOROUGH, ncol = 3, scales = "free_y") +
theme_minimal()
#| label: date5-l
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(dplyr)
library(lubridate)
library(ggplot2)
ev_week_counts_boro <- ev_weeked |>
count(BOROUGH, week, name = "evictions") |>
arrange(BOROUGH, week)
#Weekly counts per borough(ev_by_boro)
ggplot(ev_week_counts_boro, aes(BOROUGH, evictions)) +
geom_line() +
labs(title = "Evictions per Week — Faceted by Borough", x = NULL, y = "Evictions") +
facet_wrap(~ BOROUGH, ncol = 3, scales = "free_y") +
theme_minimal()
#| label: date5-l
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
ev_week_counts_boro <- ev_weeked |>
count(BOROUGH, week, name = "evictions") |>
arrange(BOROUGH, week)
ggplot(ev_week_counts_boro, aes(week, evictions)) +
geom_line() +
labs(title = "Evictions per Week — Faceted by Borough", x = NULL, y = "Evictions") +
facet_wrap(~ BOROUGH, ncol = 3, scales = "free_y") +
theme_minimal()
#| label: date3
#| echo: true
#| eval: true
#| message: false
#| warning: false
library(tidyverse)
library(lubridate)
# --- Dummy eviction-like data (10 rows) ---
# --- Date kept in typical character format
ev <- tibble(
case_id        = 1:10,
BOROUGH        = c("Manhattan","Brooklyn","Queens","Bronx","Staten Island",
"Manhattan","Brooklyn","Queens","Bronx","Manhattan"),
executed_date  = c(
"2025-01-02","2025-01-03","2025-01-07","2025-01-12","2025-02-01",
"2025-02-03","2025-02-05","2025-03-15","2025-03-16","2025-03-20"
)
)
ev
library(ggplot2)
set.seed(1)
x <- rnorm(50)
df <- data.frame(
x = x,
y_pos = 2*x + rnorm(50, 0, 0.5),
y_neg = -2*x + rnorm(50, 0, 0.5),
y_none = rnorm(50)
)
ggplot(df, aes(x, y_pos)) +
geom_point(color="steelblue") +
labs(title="Positive Correlation", x=NULL, y=NULL) +
theme_minimal(base_size=12)
## The Concept of Time in Data - Historical Examples
Joseph Priestley — A Chart of Biography (1765)
library(ggplot2)
set.seed(1)
x <- rnorm(50)
df <- data.frame(
x = x,
y_pos = 2*x + rnorm(50, 0, 0.5),
y_neg = -2*x + rnorm(50, 0, 0.5),
y_none = rnorm(50)
)
ggplot(df, aes(x, y_pos)) +
geom_point(color="steelblue") +
labs(title="Positive Correlation", x=NULL, y=NULL) +
theme_minimal(base_size=12)
library(ggplot2)
set.seed(1)
x <- rnorm(50)
df <- data.frame(
x = x,
y_pos = 2*x + rnorm(50, 0, 0.5),
y_neg = -2*x + rnorm(50, 0, 0.5),
y_none = rnorm(50)
)
ggplot(df, aes(x, y_pos)) +
geom_point(color="steelblue") +
labs(title="Positive Correlation", x=NULL, y=NULL) +
theme_minimal(base_size=12)
#| label: date5-l
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(ggplot2)
library(dplyr)
library(patchwork)
set.seed(123)
# Simulate
n  <- 200
x  <- runif(n, 1, 100)
# Case A: Linear relationship
y_lin  <- 3*x + rnorm(n, sd = 50)
# Case B: Monotonic but nonlinear (log curve)
y_mono <- 50*log(x) + rnorm(n, sd = 20)
# Compute correlations
corr_tbl <- tibble(
case   = c("Linear", "Monotonic"),
pearson = c(cor(x, y_lin,  method = "pearson"),
cor(x, y_mono, method = "pearson")),
spearman = c(cor(x, y_lin,  method = "spearman"),
cor(x, y_mono, method = "spearman"))
)
corr_tbl
set.seed(123)
# Simulate 100 census tracts
n <- 100
tracts <- paste0("Tract_", sprintf("%03d", 1:n))
# Create correlated variables
# Poverty rate roughly inversely related to income
median_income <- round(rnorm(n, mean = 70000, sd = 15000))
poverty_rate  <- round(40 - (median_income/3000) + rnorm(n, 0, 3), 1)
# Randomly add a few missing values
median_income[sample(1:n, 5)] <- NA
poverty_rate[sample(1:n, 3)]  <- NA
nyc_tracts <- data.frame(tract = tracts,
median_income,
poverty_rate)
head(nyc_tracts, 8)
## ⚠️ Common Pitfalls in Correlation Analysis
- Correlation assumes that each observation is **independent** and drawn from a consistent process.
set.seed(123)
# Simulate 100 census tracts
n <- 100
tracts <- paste0("Tract_", sprintf("%03d", 1:n))
# Create correlated variables
# Poverty rate roughly inversely related to income
median_income <- round(rnorm(n, mean = 70000, sd = 15000))
poverty_rate  <- round(40 - (median_income/3000) + rnorm(n, 0, 3), 1)
# Randomly add a few missing values
median_income[sample(1:n, 5)] <- NA
poverty_rate[sample(1:n, 3)]  <- NA
nyc_tracts <- data.frame(tract = tracts,
median_income,
poverty_rate)
head(nyc_tracts, 8)
colSums(is.na(nyc_tracts))
#Visual quick check
library(ggplot2)
library(tidyr)
nyc_tracts |>
pivot_longer(-tract) |>
mutate(is_missing = is.na(value)) |>
ggplot(aes(x = name, fill = is_missing)) +
geom_bar() +
scale_fill_manual(values=c("gray70", "tomato"),
labels=c("Present","Missing")) +
labs(title="Missing values per variable", x=NULL, y="Count") +
theme_minimal(base_size=12)
colSums(is.na(nyc_tracts))
#Visual quick check
library(ggplot2)
library(tidyr)
nyc_tracts |>
pivot_longer(-tract) |>
mutate(is_missing = is.na(value)) |>
ggplot(aes(x = name, fill = is_missing)) +
geom_bar() +
scale_fill_manual(values=c("gray70", "tomato"),
labels=c("Present","Missing")) +
labs(title="Missing values per variable", x=NULL, y="Count") +
theme_minimal(base_size=12)
colSums(is.na(nyc_tracts))
#Visual quick check
library(ggplot2)
library(tidyr)
nyc_tracts |>
pivot_longer(-tract) |>
mutate(is_missing = is.na(value)) |>
ggplot(aes(x = name, fill = is_missing)) +
geom_bar() +
scale_fill_manual(values=c("gray70", "tomato"),
labels=c("Present","Missing")) +
labs(title="Missing values per variable", x=NULL, y="Count") +
theme_minimal(base_size=12)
colSums(is.na(nyc_tracts))
#Visual quick check
library(ggplot2)
library(tidyr)
nyc_tracts |>
pivot_longer(-tract) |>
mutate(is_missing = is.na(value)) |>
ggplot(aes(x = name, fill = is_missing)) +
geom_bar() +
scale_fill_manual(values=c("gray70", "tomato"),
labels=c("Present","Missing")) +
labs(title="Missing values per variable", x=NULL, y="Count") +
theme_minimal(base_size=12)
set.seed(123)
# Simulate 100 census tracts
n <- 100
tracts <- paste0("Tract_", sprintf("%03d", 1:n))
# Create correlated variables
# Poverty rate roughly inversely related to income
median_income <- round(rnorm(n, mean = 70000, sd = 15000))
poverty_rate  <- round(40 - (median_income/3000) + rnorm(n, 0, 3), 1)
# Randomly add a few missing values
median_income[sample(1:n, 5)] <- NA
poverty_rate[sample(1:n, 3)]  <- NA
nyc_tracts <- data.frame(tract = tracts,
median_income,
poverty_rate)
head(nyc_tracts, 8)
colSums(is.na(nyc_tracts))
#Visual quick check
library(ggplot2)
library(tidyr)
nyc_tracts |>
pivot_longer(-tract) |>
mutate(is_missing = is.na(value)) |>
ggplot(aes(x = name, fill = is_missing)) +
geom_bar() +
scale_fill_manual(values=c("gray70", "tomato"),
labels=c("Present","Missing")) +
labs(title="Missing values per variable", x=NULL, y="Count") +
theme_minimal(base_size=12)
colSums(is.na(nyc_tracts))
use_opt <- "pairwise.complete.obs"
# Pearson for linear continuous data
method_opt <- "pearson"
M <- cor(nyc_tracts[, c("median_income", "poverty_rate")],
use = use_opt, method = method_opt)
M
library(ggcorrplot)
install.packages("ggcorrplot")
library(ggcorrplot)
ggcorrplot(M, lab = TRUE, type = "lower",
title = paste("Correlation Matrix (", method_opt, ")"))
# Focused scatterplot with r annotation
r_val <- round(M[1,2], 2)
ggplot(nyc_tracts, aes(median_income, poverty_rate)) +
geom_point(color="black", alpha=0.8) +
geom_smooth(method="lm", se=FALSE, color="steelblue") +
labs(title="Poverty Rate vs. Median Income (Mock NYC Data)",
subtitle=paste("r =", r_val),
x="Median income (USD)",
y="Poverty rate (%)") +
theme_minimal(base_size=12)
#| label: corr1
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
#|
library(ggcorrplot)
ggcorrplot(M, lab = TRUE, type = "lower",
title = paste("Correlation Matrix (", method_opt, ")"))
# Focused scatterplot with r annotation
r_val <- round(M[1,2], 2)
ggplot(nyc_tracts, aes(median_income, poverty_rate)) +
geom_point(color="black", alpha=0.8) +
geom_smooth(method="lm", se=FALSE, color="steelblue") +
labs(title="Poverty Rate vs. Median Income (Mock NYC Data)",
subtitle=paste("r =", r_val),
x="Median income (USD)",
y="Poverty rate (%)") +
theme_minimal(base_size=12)
#| label: corr1
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
#|
r_val <- round(M[1,2], 2)
ggplot(nyc_tracts, aes(median_income, poverty_rate)) +
geom_point(color="black", alpha=0.8) +
geom_smooth(method="lm", se=FALSE, color="steelblue") +
labs(title="Poverty Rate vs. Median Income (Mock NYC Data)",
subtitle=paste("r =", r_val),
x="Median income (USD)",
y="Poverty rate (%)") +
theme_minimal(base_size=12)
#| label: corr2
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
#|
r_val <- round(M[1,2], 2)
ggplot(nyc_tracts, aes(median_income, poverty_rate)) +
geom_point(color="black", alpha=0.8) +
geom_smooth(method="lm", se=FALSE, color="steelblue") +
labs(title="Poverty Rate vs. Median Income (Mock NYC Data)",
subtitle=paste("r =", r_val),
x="Median income (USD)",
y="Poverty rate (%)") +
theme_minimal(base_size=12)
library(ggplot2)
library(scales)
library(patchwork)
# Histogram: Median Income
p_inc <- ggplot(nyc_tracts, aes(median_income)) +
geom_histogram(bins = 30, fill = "gray30", color = "white", na.rm = TRUE) +
scale_x_continuous(labels = label_dollar(accuracy = 1)) +
labs(title = "Median Income — Histogram", x = "USD", y = "Count") +
theme_minimal(base_size = 12)
# Histogram: Poverty Rate
p_pov <- ggplot(nyc_tracts, aes(poverty_rate)) +
geom_histogram(bins = 30, fill = "gray30", color = "white", na.rm = TRUE) +
scale_x_continuous(labels = function(x) paste0(x, "%")) +
labs(title = "Poverty Rate — Histogram", x = "%", y = "Count") +
theme_minimal(base_size = 12)
p_inc + p_pov
library(ggplot2)
library(scales)
library(patchwork)
# Histogram: Median Income
p_inc <- ggplot(nyc_tracts, aes(median_income)) +
geom_histogram(bins = 30, fill = "gray30", color = "white", na.rm = TRUE) +
scale_x_continuous(labels = label_dollar(accuracy = 1)) +
labs(title = "Median Income — Histogram", x = "USD", y = "Count") +
theme_minimal(base_size = 12)
# Histogram: Poverty Rate
p_pov <- ggplot(nyc_tracts, aes(poverty_rate)) +
geom_histogram(bins = 30, fill = "gray30", color = "white", na.rm = TRUE) +
scale_x_continuous(labels = function(x) paste0(x, "%")) +
labs(title = "Poverty Rate — Histogram", x = "%", y = "Count") +
theme_minimal(base_size = 12)
p_inc + p_pov
