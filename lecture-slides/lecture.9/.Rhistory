library(dplyr)
library(lubridate)
library(forcats)
library(ggplot2)
# Derive month from the weekly date and keep it ordered Jan–Dec
ev_monthly <- ev_weeked |>
mutate(month = month(week, label = TRUE, abbr = TRUE)) |>
count(month, name = "evictions")
# Quick check plot: bars will appear in calendar order
ggplot(ev_monthly, aes(month, evictions)) +
geom_col()
#| label: date5-a
#| echo: true
#| eval: true
#| message: false
#| warning: false
library(dplyr)
library(lubridate)
library(forcats)
library(ggplot2)
# Derive month from the weekly date and keep it ordered Jan–Dec
ev_monthly <- ev_weeked |>
mutate(month = month(week, label = TRUE, abbr = TRUE)) |>
count(month, name = "evictions")
# Quick check plot: bars will appear in calendar order
ggplot(ev_monthly, aes(month, evictions)) +
geom_col()
#| label: date5-b
#| echo: true
#| eval: true
#| message: false
#| warning: false
library(dplyr)
library(lubridate)
library(forcats)
library(ggplot2)
# Reorder Months via fct_relevel
ev_monthly_random <- ev_monthly |>
mutate(month = fct_relevel(month, c("Dec","Mar","Jan","Feb")))
# Quick check plot: bars will appear in new order
ggplot(ev_monthly_random, aes(month, evictions)) +
geom_col()
#| label: date5-a
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 60% # scale down in the slide
#| fig-align: center
library(dplyr)
library(lubridate)
library(forcats)
library(ggplot2)
# Derive month from the weekly date and keep it ordered Jan–Dec using lubridate::month()
ev_monthly <- ev_weeked |>
mutate(month = month(week, label = TRUE, abbr = TRUE)) |>
count(month, name = "evictions")
# Quick check plot: bars will appear in calendar order
ggplot(ev_monthly, aes(month, evictions)) +
geom_col()
#| label: date5-b
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(dplyr)
library(lubridate)
library(forcats)
library(ggplot2)
# Count by borough + month, then reorder boroughs by total across all months
ev_boro_month <- ev_weeked |>
mutate(month = month(week, label = TRUE, abbr = TRUE)) |>
count(BOROUGH, month, name = "evictions") |>
group_by(BOROUGH) |>
mutate(total = sum(evictions, na.rm = TRUE)) |>
ungroup() |>
mutate(BOROUGH = fct_reorder(BOROUGH, total, .desc = TRUE))
# Stacked bars: boroughs ordered by total
ggplot(ev_boro_month, aes(month, evictions, fill = BOROUGH)) +
geom_col(position = "stack") +
labs(fill = "Borough (ordered)")
#| label: date5-b
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(dplyr)
library(lubridate)
library(forcats)
library(ggplot2)
# Count by borough + month
ev_boro_month <- ev_weeked |>
mutate(month = lubridate::month(week, label = TRUE, abbr = TRUE)) |>
dplyr::count(BOROUGH, month, name = "evictions")
# 1) Compute totals once (global, not per-month)
boro_totals <- ev_boro_month |>
dplyr::group_by(BOROUGH) |>
dplyr::summarise(total = sum(evictions, na.rm = TRUE), .groups = "drop") |>
dplyr::arrange(dplyr::desc(total))
# 2) Build ordered levels vector (most → least)
boro_levels <- boro_totals$BOROUGH
# 3) Apply a fixed factor order to BOROUGH (no per-bar reordering)
ev_boro_month_fixed <- ev_boro_month |>
dplyr::mutate(BOROUGH = forcats::fct_relevel(BOROUGH, boro_levels))
# Plot: stacked bars respect the fixed global order
ggplot(ev_boro_month_fixed, aes(month, evictions, fill = BOROUGH)) +
geom_col(position = "stack") +
labs(fill = "Borough (most → least total)")
#| label: date5-b
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
# Choose the order you want to SEE (most to least, alphabetical, etc.)
boro_levels <- c("Manhattan", "Brooklyn", "Queens", "Bronx", "Staten Island")
ev_simple <- ev_weeked |>
mutate(BOROUGH = fct_relevel(BOROUGH, boro_levels))
# Quick plot to show the legend/stack order follows your levels
ev_simple |>
count(BOROUGH, name = "evictions") |>
ggplot(aes(BOROUGH, evictions, fill = BOROUGH)) +
geom_col()
#| label: date5-b
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
# Choose the order you want to SEE (most to least, alphabetical, etc.)
boro_levels <- c("Brooklyn", "Queens", "Bronx", "Staten Island")
ev_simple <- ev_weeked |>
mutate(BOROUGH = fct_relevel(BOROUGH, boro_levels))
# Quick plot to show the legend/stack order follows your levels
ev_simple |>
count(BOROUGH, name = "evictions") |>
ggplot(aes(BOROUGH, evictions, fill = BOROUGH)) +
geom_col()
#| label: date5-b
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
ev_simple <- ev_weeked |>
mutate(BOROUGH = fct_relevel(BOROUGH, boro_levels))
# Quick plot to show the legend/stack order follows your levels
ev_simple |>
count(BOROUGH, name = "evictions") |>
ggplot(aes(BOROUGH, evictions, fill = BOROUGH)) +
geom_col()
#| label: date5-b
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
ev_by_boro <- ev_weeked |>
count(BOROUGH, name = "evictions") |>
mutate(BOROUGH = fct_reorder(BOROUGH, evictions, .desc = TRUE))
ggplot(ev_by_boro, aes(BOROUGH, evictions, fill = BOROUGH)) +
geom_col() +
labs(x = NULL, y = "Evictions", fill = "Borough (data-driven order)")
#| label: date5-d
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
# Weekly series by borough, order legend by the last week's count
ev_week_counts <- ev_weeked |>
count(BOROUGH, week, name = "evictions") |>
mutate(BOROUGH = fct_reorder2(BOROUGH, week, evictions, .fun = last, .desc = TRUE))
ggplot(ev_week_counts, aes(week, evictions, color = BOROUGH)) +
geom_line() +
labs(color = "Borough (ordered by last value)")
#| label: date5-d
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
ev_with_na <- ev_weeked |>
mutate(BOROUGH = if_else(row_number() == 1L, NA_character_, BOROUGH),
BOROUGH = fct_explicit_na(BOROUGH, na_level = "Unknown")) |>
count(BOROUGH, name = "evictions")
ggplot(ev_with_na, aes(BOROUGH, evictions)) + geom_col()
#| label: date5-c
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
ev_week_counts <- ev_weeked |>
count(week, name = "evictions") |>
arrange(week)
ggplot(ev_week_counts, aes(week, evictions)) +
geom_line() +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
scale_y_continuous(labels = label_number(big.mark = ",")) +
labs(
title = "Evictions per Week (Dummy Data)",
x = NULL, y = "Evictions"
) +
theme_minimal()
#| label: date5-c
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(dplyr)
library(lubridate)
library(ggplot2)
library(scales)
ev_week_counts <- ev_weeked |>
count(week, name = "evictions") |>
arrange(week)
ggplot(ev_week_counts, aes(week, evictions)) +
geom_line() +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
scale_y_continuous(labels = label_number(big.mark = ",")) +
labs(
title = "Evictions per Week (Dummy Data)",
x = NULL, y = "Evictions"
) +
theme_minimal()
#| label: date5-d
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
ev_monthly <- ev_weeked |>
mutate(month = month(week, label = TRUE, abbr = TRUE)) |>
count(month, name = "evictions")
ggplot(ev_monthly, aes(month, evictions)) +
geom_col() +
labs(
title = "Monthly Evictions (Binned by Week → Month)",
x = NULL, y = "Evictions"
) +
theme_minimal()
#| label: date5-e````
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
ev_monthly_cycle <- ev_weeked |>
mutate(month = month(week, label = TRUE, abbr = TRUE)) |>
count(month, name = "evictions")
ggplot(ev_monthly_cycle, aes(month, evictions)) +
geom_col() +
coord_polar() +
labs(
title = "Seasonality: Evictions by Month (Polar Cycle)",
x = NULL, y = NULL
) +
theme_minimal()
#| label: date5-k
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
ev_monthly <- ev_weeked |>
mutate(month = month(week, label = TRUE, abbr = TRUE)) |>
count(month, name = "evictions")
ggplot(ev_monthly, aes(month, evictions)) +
geom_col() +
labs(
title = "Monthly Evictions (Binned by Week → Month)",
x = NULL, y = "Evictions"
) +
theme_minimal()
#| label: date5-g
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
ev_monthly_cycle <- ev_weeked |>
mutate(month = month(week, label = TRUE, abbr = TRUE)) |>
count(month, name = "evictions")
ggplot(ev_monthly_cycle, aes(month, evictions)) +
geom_col() +
coord_polar() +
labs(
title = "Seasonality: Evictions by Month (Polar Cycle)",
x = NULL, y = NULL
) +
theme_minimal()
#| label: date5-c
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(scales)
ev_week_counts <- ev_weeked |>
count(week, name = "evictions") |>
arrange(week)
ggplot(ev_week_counts, aes(week, evictions)) +
geom_line() +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
scale_y_continuous(labels = label_number(big.mark = ",")) +
labs(
title = "Evictions per Week (Dummy Data)",
x = NULL, y = "Evictions"
) +
theme_minimal()
#| label: date5-c
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(scales)
ev_week_counts <- ev_weeked |>
count(week, name = "evictions") |>
arrange(week)
#| label: date5-c
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(scales)
ev_week_counts <- ev_weeked |>
count(week, name = "evictions") |>
arrange(week)
#| label: date5-c
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(scales)
ggplot(ev_week_counts, aes(week, evictions)) +
geom_line() +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
scale_y_continuous(labels = label_number(big.mark = ",")) +
labs(
title = "Evictions per Week (Dummy Data)",
x = NULL, y = "Evictions"
) +
theme_minimal()
#| label: date5-l
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(dplyr)
library(lubridate)
library(ggplot2)
Bin to Monday-start weeks
#| label: date5-l
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(dplyr)
library(lubridate)
library(ggplot2)
ev_weeked <- ev |>
mutate(
executed_date = ymd(executed_date),
week = floor_date(executed_date, "week", week_start = 1)
)
ev_week_counts_boro <- ev_weeked |>
count(BOROUGH, week, name = "evictions") |>
arrange(BOROUGH, week)
ggplot(ev_week_counts_boro, aes(week, evictions)) +
geom_line() +
labs(title = "Evictions per Week — Faceted by Borough", x = NULL, y = "Evictions") +
facet_wrap(~ BOROUGH, ncol = 3, scales = "free_y") +
theme_minimal()
#| label: date5-l
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(dplyr)
library(lubridate)
library(ggplot2)
ev_week_counts_boro <- ev_weeked |>
count(BOROUGH, week, name = "evictions") |>
arrange(BOROUGH, week)
ggplot(ev_week_counts_boro, aes(week, evictions)) +
geom_line() +
labs(title = "Evictions per Week — Faceted by Borough", x = NULL, y = "Evictions") +
facet_wrap(~ BOROUGH, ncol = 3, scales = "free_y") +
theme_minimal()
#| label: date5-l
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(dplyr)
library(lubridate)
library(ggplot2)
#Weekly counts per borough(ev_by_boro)
ggplot(ev_by_boro, aes(week, evictions)) +
geom_line() +
labs(title = "Evictions per Week — Faceted by Borough", x = NULL, y = "Evictions") +
facet_wrap(~ BOROUGH, ncol = 3, scales = "free_y") +
theme_minimal()
#| label: date5-l
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(dplyr)
library(lubridate)
library(ggplot2)
#Weekly counts per borough(ev_by_boro)
ggplot(ev_by_boro, aes(BOROUGH, evictions)) +
geom_line() +
labs(title = "Evictions per Week — Faceted by Borough", x = NULL, y = "Evictions") +
facet_wrap(~ BOROUGH, ncol = 3, scales = "free_y") +
theme_minimal()
#| label: date5-l
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
library(dplyr)
library(lubridate)
library(ggplot2)
ev_week_counts_boro <- ev_weeked |>
count(BOROUGH, week, name = "evictions") |>
arrange(BOROUGH, week)
#Weekly counts per borough(ev_by_boro)
ggplot(ev_week_counts_boro, aes(BOROUGH, evictions)) +
geom_line() +
labs(title = "Evictions per Week — Faceted by Borough", x = NULL, y = "Evictions") +
facet_wrap(~ BOROUGH, ncol = 3, scales = "free_y") +
theme_minimal()
#| label: date5-l
#| echo: true
#| message: false
#| warning: false
#| fig-width: 5 # inches drawn
#| fig-height: 3
#| out-width: 30% # scale down in the slide
#| fig-align: center
ev_week_counts_boro <- ev_weeked |>
count(BOROUGH, week, name = "evictions") |>
arrange(BOROUGH, week)
ggplot(ev_week_counts_boro, aes(week, evictions)) +
geom_line() +
labs(title = "Evictions per Week — Faceted by Borough", x = NULL, y = "Evictions") +
facet_wrap(~ BOROUGH, ncol = 3, scales = "free_y") +
theme_minimal()
