tab_options(
table.width = pct(100),
data_row.padding = px(4),
table.font.size = px(14)
)
#| label: build-tibble-code
#| echo: true
#| eval: false    # show code but do NOT execute here
df_2 <- df %>%
filter(status == "active") %>%
select(id, group, starts_with("income_")) %>%
mutate(income_k = income_2023 / 1000) %>%
group_by(group) %>%
summarize(
mean_income_k   = mean(income_k, na.rm = TRUE),
median_income_k = median(income_k, na.rm = TRUE),
n               = n(),
.groups = "drop"
) %>%
arrange(desc(mean_income_k))
#| label: build-tibble-run
#| include: false
#| dependson: setup
#| message: false
#| warning: false
df_2 <- df %>%
filter(status == "active") %>%
select(id, group, starts_with("income_")) %>%
mutate(income_k = income_2023 / 1000) %>%
group_by(group) %>%
summarize(
mean_income_k   = mean(income_k, na.rm = TRUE),
median_income_k = median(income_k, na.rm = TRUE),
n               = n(),
.groups = "drop"
) %>%
arrange(desc(mean_income_k))
#| label: show-df2
#| dependson: build-tibble-run
#| echo: false
#| message: false
#| warning: false
library(dplyr)
library(gt)
df_2 %>%
gt() %>%
fmt_number(columns = c(mean_income_k, median_income_k), decimals = 1, use_seps = TRUE) %>%
cols_label(
group           = "Group",
mean_income_k   = "Mean Income (k$)",
median_income_k = "Median Income (k$)",
n               = "N"
) %>%
tab_header(title = md("**Income Summary by Group — Active Records**")) %>%
tab_options(table.width = pct(100), data_row.padding = px(6), table.font.size = px(16))
#| label: acs-mean-rent-build
#| include: false
#| dependson: setup
#| message: false
#| warning: false
acs %>%
group_by(county) %>%
summarize(mean_rent = mean(rent, na.rm = TRUE), .groups = "drop")
## Reshaping with tidyr
#| label: pivot-longer-gt
#| dependson: setup
#| echo: false
#| message: false
#| warning: false
library(dplyr); library(tidyr); library(gt)
wide %>%
pivot_longer(cols = starts_with("year_"),
names_to = "year",
values_to = "rent") %>%
arrange(id, year) %>%                       # optional: tidy ordering
gt() %>%
fmt_number(columns = rent, decimals = 0, use_seps = TRUE) %>%
cols_label(id = "ID", year = "Year", rent = "Rent") %>%
tab_header(title = md("**Pivot longer: wide → long**")) %>%
tab_options(table.width = pct(100), data_row.padding = px(6), table.font.size = px(16))
#| label: build-tibble-code
#| echo: true
#| eval: false    # show code but do NOT execute here
df_2 <- df %>%
filter(status == "active") %>%
select(id, group, starts_with("income_")) %>%
mutate(income_k = income_2023 / 1000) %>%
group_by(group) %>%
summarize(
mean_income_k   = mean(income_k, na.rm = TRUE),
median_income_k = median(income_k, na.rm = TRUE),
n               = n(),
.groups = "drop"
) %>%
arrange(desc(mean_income_k))
#| label: build-tibble-run
#| include: false
#| dependson: setup
#| message: false
#| warning: false
df_2 %>%
filter(status == "active") %>%
select(id, group, starts_with("income_")) %>%
mutate(income_k = income_2023 / 1000) %>%
group_by(group) %>%
summarize(
mean_income_k   = mean(income_k, na.rm = TRUE),
median_income_k = median(income_k, na.rm = TRUE),
n               = n(),
.groups = "drop"
) %>%
arrange(desc(mean_income_k))
#| label: build-tibble-run
#| include: false
#| dependson: setup
#| message: false
#| warning: false
df_2 <- df %>%
filter(status == "active") %>%
select(id, group, starts_with("income_")) %>%
mutate(income_k = income_2023 / 1000) %>%
group_by(group) %>%
summarize(
mean_income_k   = mean(income_k, na.rm = TRUE),
median_income_k = median(income_k, na.rm = TRUE),
n               = n(),
.groups = "drop"
) %>%
arrange(desc(mean_income_k))
#| label: acs-mean-rent-check
#| dependson: acs-mean-rent-build
#| echo: false
cat(paste0("**Grouping dropped:** ",
ifelse(!dplyr::is_grouped_df(acs_res), "YES", "NO")))
#| label: acs-mean-rent-check
#| dependson: acs-mean-rent-build
#| echo: false
cat(paste0("**Grouping dropped:** ",
ifelse(!dplyr::is_grouped_df(acs), "YES", "NO")))
#| label: acs-first10-raw-gt
#| dependson: setup
#| echo: false
#| message: false
#| warning: false
library(dplyr); library(gt); library(scales)
acs %>%
ungroup() %>%                 # ensure no lingering grouping
slice_head(n = 10) %>%
gt() %>%
fmt_number(columns = rent, decimals = 0, use_seps = TRUE) %>%
cols_label(county = "County", rent = "Rent (USD)") %>%
tab_header(title = md("**ACS (first 10 rows, ungrouped)**")) %>%
tab_options(table.width = pct(100), data_row.padding = px(6), table.font.size = px(16))
#| label: build-clean-id
#| include: false
#| dependson: setup
#| message: false
#| warning: false
library(dplyr)
library(stringr)
# Create a cleaned, human-friendly ID from raw_name
# Steps: trim → squish spaces → Title Case → to lower → spaces → "_" → strip non-alnum/underscore
df <- df %>%
mutate(
ID = raw_name |>
str_trim() |>
str_squish() |>
str_to_lower() |>
str_replace_all("\\s+", "_") |>
str_replace_all("[^a-z0-9_]", "")
)
#| label: build-clean-id
#| include: false
#| dependson: setup
#| message: false
#| warning: false
library(dplyr)
library(stringr)
# Create a cleaned, human-friendly ID from raw_name
# Steps: trim → squish spaces → Title Case → to lower → spaces → "_" → strip non-alnum/underscore
df <- df %>%
mutate(
ID = raw_name |>
str_trim() |>
str_squish() |>
str_to_lower() |>
str_replace_all("\\s+", "_") |>
str_replace_all("[^a-z0-9_]", "")
)
#| label: build-clean-id
#| include: false
#| dependson: setup
#| message: false
#| warning: false
library(dplyr)
library(stringr)
# Create a cleaned, human-friendly ID from raw_name
# Steps: trim → squish spaces → Title Case → to lower → spaces → "_" → strip non-alnum/underscore
df <- df %>%
mutate(
ID = raw_name |>
str_trim() |>
str_squish() |>
str_to_lower() |>
str_replace_all("\\s+", "_") |>
str_replace_all("[^a-z0-9_]", "")
)
#| label: demo-lubridate-stringr
#| dependson: setup
#| echo: true
#| message: false
#| warning: false
library(dplyr)
library(lubridate)
library(stringr)
# Add date- and text-derived features
df_enriched <- df %>%
mutate(
# lubridate
month   = floor_date(date_col, "month"),
dow     = wday(date_col, label = TRUE, abbr = TRUE, week_start = 1), # Mon..Sun
quarter = quarter(date_col, with_year = FALSE),
# stringr
borough_snake = borough |> str_to_lower() |> str_replace_all("\\s+", "_"),
status_title  = str_to_title(status)
)
# Quick inline peek so the slide shows some output
df_enriched %>%
select(id, borough, borough_snake, status, status_title, date_col, month, dow, quarter) %>%
slice_head(n = 8)
#| label: demo-lubridate-stringr-gt
#| dependson: demo-lubridate-stringr
#| echo: false
#| message: false
#| warning: false
library(dplyr)
library(gt)
df_enriched %>%
select(
id,
borough_clean = borough_snake,
status        = status_title,
date          = date_col,
month_start   = month,
dow,
quarter
) %>%
slice_head(n = 12) %>%
gt() %>%
fmt_date(columns = c(date, month_start), date_style = 3) %>%   # nice human-readable dates
cols_label(
id           = "ID",
borough_clean= "Borough (clean)",
status       = "Status",
date         = "Date",
month_start  = "Month Start",
dow          = "Day of Week",
quarter      = "Quarter"
) %>%
tab_header(title = md("**stringr + lubridate on `df` (first 12 rows)**")) %>%
tab_options(table.width = pct(100), data_row.padding = px(6), table.font.size = px(16))
#| label: demo-lubridate-stringr-gt
#| dependson: demo-lubridate-stringr
#| echo: false
#| include: true
#| message: false
#| warning: false
df_enriched %>%
dplyr::select(
id,
borough_clean = borough_snake,
status        = status_title,
date          = date_col,
month_start   = month,
dow,
quarter
) %>%
dplyr::slice_head(n = 12) %>%
gt::gt() %>%
gt::fmt_date(columns = c(date, month_start), date_style = 3) %>%
gt::cols_label(
id            = "ID",
borough_clean = "Borough (clean)",
status        = "Status",
date          = "Date",
month_start   = "Month Start",
dow           = "Day of Week",
quarter       = "Quarter"
) %>%
gt::tab_header(title = gt::md("**stringr + lubridate on `df` (first 12 rows)**")) %>%
gt::tab_options(table.width = gt::pct(100), data_row.padding = gt::px(6), table.font.size = gt::px(16))
#| label: show-rent-zeros-gt
#| dependson: build-rent-zeros
#| echo: false
#| message: false
#| warning: false
library(gt)
df_rent %>%
select(id, group, status, rent, income, borough) %>%
slice_head(n = 12) %>%
gt() %>%
fmt_number(columns = c(rent, income), decimals = 0, use_seps = TRUE) %>%
cols_label(
id      = "ID",
group   = "Group",
status  = "Status",
rent    = "Rent (USD, NAs → 0)",
income  = "Income (USD)",
borough = "Borough"
) %>%
tab_header(title = md("**Rows with Rent = 0 Shown First**")) %>%
tab_options(table.width = pct(100), data_row.padding = px(6), table.font.size = px(16))
#| label: build-rent-zeros
#| include: false
#| dependson: setup
#| message: false
#| warning: false
library(dplyr); library(tidyr)
df_rent <- df %>%
mutate(rent = replace_na(rent, 0)) %>%      # fill NAs with 0
arrange(desc(rent == 0), rent)
#| label: show-rent-zeros-gt
#| dependson: build-rent-zeros
#| echo: false
#| message: false
#| warning: false
library(gt)
df_rent %>%
select(id, group, status, rent, income, borough) %>%
slice_head(n = 12) %>%
gt() %>%
fmt_number(columns = c(rent, income), decimals = 0, use_seps = TRUE) %>%
cols_label(
id      = "ID",
group   = "Group",
status  = "Status",
rent    = "Rent (USD, NAs → 0)",
income  = "Income (USD)",
borough = "Borough"
) %>%
tab_header(title = md("**Rows with Rent = 0 Shown First**")) %>%
tab_options(table.width = pct(100), data_row.padding = px(6), table.font.size = px(16))
#| label: show-df-zero-gt
#| dependson: build-df-zero
#| echo: false
#| message: false
#| warning: false
library(dplyr)
library(gt)
df_zero %>%
arrange(desc(rent == 0), rent) %>%    # show zero rents first
select(id, group, status, rent, income, borough, year) %>%
slice_head(n = 12) %>%
gt() %>%
fmt_number(columns = c(rent, income), decimals = 0, use_seps = TRUE) %>%
cols_label(
id      = "ID",
group   = "Group",
status  = "Status",
rent    = "Rent (USD)",
income  = "Income (USD)",
borough = "Borough",
year    = "Year"
) %>%
tab_header(title = md("**df with 25% Rent = 0 (first 12 rows; zeros shown first)**")) %>%
tab_options(table.width = pct(100), data_row.padding = px(6), table.font.size = px(16))
#| label: build-df-zero
#| include: false
#| dependson: setup
#| message: false
#| warning: false
library(dplyr)
set.seed(42)  # reproducible selection of zero rows
n_rows   <- nrow(df)
n_zeros  <- floor(0.25 * n_rows)
zero_idx <- sample.int(n_rows, size = n_zeros, replace = FALSE)
# Same columns as df; only change: 25% of `rent` set to 0
df_zero <- df %>%
mutate(rent = replace(rent, zero_idx, 0L))
#| label: show-df-zero-gt
#| dependson: build-df-zero
#| echo: false
#| message: false
#| warning: false
library(dplyr)
library(gt)
df_zero %>%
arrange(desc(rent == 0), rent) %>%    # show zero rents first
select(id, group, status, rent, income, borough, year) %>%
slice_head(n = 12) %>%
gt() %>%
fmt_number(columns = c(rent, income), decimals = 0, use_seps = TRUE) %>%
cols_label(
id      = "ID",
group   = "Group",
status  = "Status",
rent    = "Rent (USD)",
income  = "Income (USD)",
borough = "Borough",
year    = "Year"
) %>%
tab_header(title = md("**df with 25% Rent = 0 (first 12 rows; zeros shown first)**")) %>%
tab_options(table.width = pct(100), data_row.padding = px(6), table.font.size = px(16))
#| label: build-rent-zeros
#| include: false
#| dependson: setup
#| message: false
#| warning: false
library(dplyr); library(tidyr)
df_rent <- df_zero %>%
mutate(rent = replace_na(rent, 0)) %>%      # fill NAs with 0
arrange(desc(rent == 0), rent)
#| label: show-rent-zeros-gt
#| dependson: build-rent-zeros
#| echo: false
#| message: false
#| warning: false
library(gt)
df_rent %>%
select(id, group, status, rent, income, borough) %>%
slice_head(n = 12) %>%
gt() %>%
fmt_number(columns = c(rent, income), decimals = 0, use_seps = TRUE) %>%
cols_label(
id      = "ID",
group   = "Group",
status  = "Status",
rent    = "Rent (USD, NAs → 0)",
income  = "Income (USD)",
borough = "Borough"
) %>%
tab_header(title = md("**Rows with Rent = 0 Shown First**")) %>%
tab_options(table.width = pct(100), data_row.padding = px(6), table.font.size = px(16))
#| label: build-rent-zeros
#| include: false
#| dependson: setup
#| message: false
#| warning: false
library(dplyr); library(tidyr)
df_rent <- df_zero %>%
mutate(rent = replace_na(rent, 0)) %>%      # fill NAs with 0
arrange(desc(rent == 0), rent)
#| label: build-rent-na-code
#| echo: true
#| eval: false
#| message: false
#| warning: false
# Convert zeros in `rent` to NA, then order with NAs first
df_rent_na <- df_zero %>%
mutate(rent = na_if(rent, 0)) %>%
arrange(desc(is.na(rent)), rent)
#| label: show-rent-na-gt
#| dependson: build-rent-na
#| echo: false
#| message: false
#| warning: false
library(dplyr); library(gt)
df_rent_na %>%
select(id, group, status, rent, income, borough, year) %>%
slice_head(n = 12) %>%
gt() %>%
sub_missing(columns = rent, missing_text = "NA") %>%  # make NA explicit in display
fmt_number(columns = c(rent, income), decimals = 0, use_seps = TRUE) %>%
cols_label(
id      = "ID",
group   = "Group",
status  = "Status",
rent    = "Rent (USD; 0 → NA)",
income  = "Income (USD)",
borough = "Borough",
year    = "Year"
) %>%
tab_header(title = md("**Rent with Zeros Replaced by NA (first 12 rows)**")) %>%
tab_options(table.width = pct(100), data_row.padding = px(6), table.font.size = px(16))
#| label: build-rent-na-run
#| dependson: build-df-zero
#| echo: true
#| eval: true
#| results: "hide"
#| message: false
#| warning: false
df_rent_na <- df_zero %>%
dplyr::mutate(rent = dplyr::na_if(rent, 0)) %>%
dplyr::arrange(dplyr::desc(is.na(rent)), rent)
#| label: show-rent-na-gt
#| dependson: build-rent-na
#| echo: false
#| message: false
#| warning: false
library(dplyr); library(gt)
df_rent_na %>%
select(id, group, status, rent, income, borough, year) %>%
slice_head(n = 12) %>%
gt() %>%
sub_missing(columns = rent, missing_text = "NA") %>%  # make NA explicit in display
fmt_number(columns = c(rent, income), decimals = 0, use_seps = TRUE) %>%
cols_label(
id      = "ID",
group   = "Group",
status  = "Status",
rent    = "Rent (USD; 0 → NA)",
income  = "Income (USD)",
borough = "Borough",
year    = "Year"
) %>%
tab_header(title = md("**Rent with Zeros Replaced by NA (first 12 rows)**")) %>%
tab_options(table.width = pct(100), data_row.padding = px(6), table.font.size = px(16))
ggplot(df, aes(x = rent, y = income, color = borough)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "NYC Rent vs Income", x = "Median Rent", y = "Median Income") +
theme_minimal()
